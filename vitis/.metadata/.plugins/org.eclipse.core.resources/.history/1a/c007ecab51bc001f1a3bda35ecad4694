/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

#include "xparameters.h"
#include "xil_io.h"
#include "xuartps.h"
#include "xuartps_hw.h"
#include <stdlib.h>
#include <stdint.h>




 #define A_Register 0x0
 #define B_Register 0x4
 #define C_Register 0x8
 #define D_Register 0x10
 #define ModeSel_Register 0xC




int main()
{

    init_platform();

	unsigned int Ain, Bin, Cin,Din, P = 0;
	unsigned int ModeSel = 0;
	unsigned int offsetA = 0;
	unsigned int offsetB = 0;
	unsigned int offsetC = 0;
	unsigned int offsetD = 0;
	unsigned int offsetModesel = 0;
	unsigned int offsetP = 0;
    while (1) {



    	printf("###### A  *  B  + or -  C  =  P ######");
    	printf("\n  \tPlease input A value : 0x");
    	scanf("%x",&Ain);
    	printf("%x",Ain);
    	printf("\n  \tPlease input B value : 0x");
    	scanf("%x",&Bin);
    	printf("%x",Bin);
    	printf("\n  \tPlease input C value : 0x");
    	scanf("%x",&Cin);
    	printf("%x",Cin);
    	printf("\n  \tPlease input D value : 0x");
    	scanf("%x",&Din);
    	printf("%x",Din);
    	printf("\nMode Select\n");
    	printf("mode_sel :\n");
    	printf("8'bxxxx_xxx0 : Adder mode (A*1+0)\n");
    	printf("8'bxxxx_xxx1 : Subtract mode (A*1-0)\n");
    	printf("8'bxxxx_xx1x : Mult Mode (A*B+0)\n");
    	printf("8'bxxxx_x11x : Mult Add mode (A*B + C+D)\n");
    	printf("8'bxxxx_x111 : Mult Sub mode (A*B - C)\n");
    	printf("\nMode Select : 0x");
    	scanf("%x",&ModeSel);
    	printf("%x\n\n",ModeSel);

    	if ((Ain<0) || (Bin<0) || (Cin<0) )
    	{
    		printf("Error : A,B,C input must be >= 0 \n");

    	}
    	else if ( (ModeSel && 0x1)&&(Ain*Bin<Cin) )
    	{
    		printf("Error : A,B,C input must be A*B >= C \n");

    	}
    	else
    	{
    	 ConfigMultAdd(Ain,Bin,Cin,Din, ModeSel);
//    		*(volatile unsigned int*)(0xA0000000) = Ain; //it is replaced with Xil_Out32 api
//    		*(volatile unsigned int*)(0xA0000004) = Bin;
//    		*(volatile unsigned int*)(0xA0000008) = Cin;
//    		*(volatile unsigned int*)(0xA000000C) = ModeSel;
    		P = *(volatile unsigned int*)(0xA0000400);



		printf("P = 0x%x\n", (u_int16_t) P) ;

    	sleep(2); // 2sec
    	};
    };

    cleanup_platform();
    return 0;
}
 void ConfigMultAdd(unsigned int *input1, unsigned int *input2, unsigned int *input3, unsigned int *input4,unsigned int *modesel)
 {
 	Xil_Out32((XPAR_AXI_LITE_TEMPLATE_TOP_0_BASEADDR+A_Register), input1);
 	Xil_Out32((XPAR_AXI_LITE_TEMPLATE_TOP_0_BASEADDR+B_Register), input2);
 	Xil_Out32((XPAR_AXI_LITE_TEMPLATE_TOP_0_BASEADDR+C_Register), input3);
 	Xil_Out32((XPAR_AXI_LITE_TEMPLATE_TOP_0_BASEADDR+D_Register), input4);
 	Xil_Out32((XPAR_AXI_LITE_TEMPLATE_TOP_0_BASEADDR+ModeSel_Register), modesel);
 };


